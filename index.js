const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = process.env.PORT || 8080;

// Middleware setup
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Health check endpoint for Firebase hosting
app.get('/', (req, res) => {
    res.status(200).json({
        status: 'OK',
        message: 'AnonTalk Bot is running',
        version: '2.0.0',
        timestamp: new Date().toISOString(),
        port: port,
        env: process.env.NODE_ENV || 'development'
    });
});

// Bot status endpoint
app.get('/status', (req, res) => {
    res.status(200).json({
        bot: 'AnonTalk Bot',
        status: 'Active',
        version: '2.0.0',
        features: [
            '24 Rooms across 9 categories',
            '3 Languages (Indonesia, English, Jawa)',
            'VIP System with priority features',
            'Enhanced media support',
            'Inline keyboard navigation'
        ],
        uptime: process.uptime(),
        port: port
    });
});

// Test endpoint for debugging
app.get('/test', (req, res) => {
    res.status(200).json({
        message: 'Test endpoint working',
        env: process.env.NODE_ENV || 'development',
        port: port,
        timestamp: new Date().toISOString()
    });
});

// Debug endpoint to check environment
app.get('/debug', (req, res) => {
    res.status(200).json({
        botToken: process.env.BOT_TOKEN ? 'Set' : 'Not set',
        nodeEnv: process.env.NODE_ENV || 'development',
        port: port,
        timestamp: new Date().toISOString()
    });
});

// Start server immediately for Cloud Run readiness
console.log(`üöÄ Starting server on port ${port}...`);
const server = app.listen(port, '0.0.0.0', () => {
    console.log(`‚úÖ Server running on port ${port}`);
    console.log(`üìä Health check: /`);
    console.log(`üìà Status: /status`);
    console.log(`üß™ Test: /test`);
    console.log(`üêõ Debug: /debug`);
    
    // Initialize bot after server is ready
    setTimeout(() => {
        initializeBot();
    }, 1000);
});

// Handle server errors
server.on('error', (error) => {
    console.error('‚ùå Server error:', error);
    process.exit(1);
});

// Bot initialization function
async function initializeBot() {
    try {
        console.log('ü§ñ Starting bot initialization...');
        
        // Load environment variables
        require('dotenv').config();
        console.log('üìÑ Environment variables loaded');
        
        // Load bot dependencies
        console.log('üì¶ Loading dependencies...');
        const { Telegraf } = require('telegraf');
        console.log('‚úÖ Telegraf loaded');
        
        // Get token from environment variables only
        const token = process.env.BOT_TOKEN;
        console.log('üîë Bot token:', token ? 'Set' : 'Not set');
        
        if (!token || token === "your_telegram_bot_token_here") {
            console.error("‚ùå BOT_TOKEN is not set. Please set your Telegram bot token in the .env file.");
            console.log("‚ö†Ô∏è Bot will not start, but server is running for health checks");
            return;
        }
        
        console.log('ü§ñ Creating bot instance...');
        const bot = new Telegraf(token);
        const secretPath = '/' + token;
        
        console.log('ü§ñ Bot instance created');
        
        // Enhanced start command
        bot.start((ctx) => {
            console.log('üì® Received /start command from:', ctx.from.id);
            ctx.reply('üéâ Selamat datang di AnonTalk Bot!\n\n' +
                     'ü§ñ Bot untuk chat anonymous dengan user lain\n\n' +
                     'üìã Perintah yang tersedia:\n' +
                     '/lang - Pilih bahasa\n' +
                     '/join - Masuk room\n' +
                     '/rooms - Lihat daftar room\n' +
                     '/help - Bantuan lengkap\n' +
                     '/vip - Fitur VIP');
        });
        
        // Help command
        bot.help((ctx) => {
            ctx.reply('üìã Perintah AnonTalk Bot:\n\n' +
                     'üéØ Dasar:\n' +
                     '/start - Mulai bot\n' +
                     '/help - Bantuan ini\n' +
                     '/lang - Pilih bahasa\n\n' +
                     'üè† Room:\n' +
                     '/join - Masuk room\n' +
                     '/rooms - Lihat daftar room\n' +
                     '/exit - Keluar dari room\n' +
                     '/list - Lihat user di room\n\n' +
                     '‚öôÔ∏è Settings:\n' +
                     '/avatar - Set avatar\n' +
                     '/cancel - Batalkan aksi\n\n' +
                     'üíé VIP:\n' +
                     '/vip - Info VIP\n' +
                     '/create-room - Buat room VIP\n\n' +
                     'üíù Lainnya:\n' +
                     '/donate - Donasi');
        });
        
        // Language command
        bot.command('lang', (ctx) => {
            ctx.reply('üåç Pilih bahasa:\n\n' +
                     'üáÆüá© Indonesia\n' +
                     'üá∫üá∏ English\n' +
                     'üáØüáµ Jawa\n\n' +
                     'Ketik: /lang id, /lang en, atau /lang jw');
        });
        
        // Join command
        bot.command('join', (ctx) => {
            ctx.reply('üè† Pilih kategori room:\n\n' +
                     'üéÆ Gaming\n' +
                     'üí¨ General\n' +
                     'üìö Education\n' +
                     'üéµ Music\n' +
                     'üé¨ Entertainment\n' +
                     'üíª Technology\n' +
                     'üèÉ Sports\n' +
                     'üçî Food\n' +
                     '‚úàÔ∏è Travel\n\n' +
                     'Ketik: /join gaming, /join general, dll');
        });
        
        // Rooms command
        bot.command('rooms', (ctx) => {
            ctx.reply('üè† Daftar Room Tersedia:\n\n' +
                     'üéÆ Gaming (3 rooms)\n' +
                     'üí¨ General (3 rooms)\n' +
                     'üìö Education (3 rooms)\n' +
                     'üéµ Music (3 rooms)\n' +
                     'üé¨ Entertainment (3 rooms)\n' +
                     'üíª Technology (3 rooms)\n' +
                     'üèÉ Sports (3 rooms)\n' +
                     'üçî Food (3 rooms)\n' +
                     '‚úàÔ∏è Travel (3 rooms)\n\n' +
                     'Total: 24 rooms aktif');
        });
        
        // VIP command
        bot.command('vip', (ctx) => {
            ctx.reply('üíé Fitur VIP AnonTalk Bot:\n\n' +
                     '‚ú® Keunggulan VIP:\n' +
                     '‚Ä¢ Buat room pribadi\n' +
                     '‚Ä¢ Prioritas masuk room\n' +
                     '‚Ä¢ Avatar custom\n' +
                     '‚Ä¢ Emoji unlimited\n\n' +
                     'üí∞ Harga:\n' +
                     '‚Ä¢ Harian: Rp 5.000\n' +
                     '‚Ä¢ Mingguan: Rp 25.000\n' +
                     '‚Ä¢ Bulanan: Rp 75.000\n\n' +
                     'Untuk info lebih lanjut, hubungi admin.');
        });
        
        // Test command
        bot.command('test', (ctx) => {
            ctx.reply('‚úÖ Bot berfungsi dengan baik!\n\n' +
                     'ü§ñ AnonTalk Bot v2.0.0\n' +
                     'üìä Status: Online\n' +
                     'üåê Server: Firebase App Hosting');
        });
        
        // Handle all messages
        bot.on('message', (ctx) => {
            const message = ctx.message.text;
            console.log('üì® Received message:', message);
            
            // Simple message handling
            if (message && !message.startsWith('/')) {
                ctx.reply('üí¨ Pesan Anda: ' + message + '\n\n' +
                         'üîó Anda sekarang bisa chat dengan user lain di room!\n' +
                         'Gunakan /join untuk masuk room.');
            }
        });
        
        // Bot error handling
        bot.catch((err, ctx) => {
            console.error(`‚ùå Bot error for ${ctx.updateType}:`, err);
            try {
                ctx.reply('An error occurred. Please try again later.');
            } catch (replyError) {
                console.error('Error sending error message:', replyError);
            }
        });
        
        console.log('üîß Setting up webhook...');
        
        // Attach webhook handler
        if (process.env.NODE_ENV === 'production') {
            console.log('üåê Production mode - using webhook');
            app.use(bot.webhookCallback(secretPath));
            console.log(`ü§ñ Webhook endpoint ready at ${secretPath}`);
            
            // Set webhook
            const webhookUrl = process.env.WEBHOOK_URL || `https://anontalk-app--anontalk-bot-5f3f1.asia-east1.hosted.app${secretPath}`;
            console.log('üîó Setting webhook to:', webhookUrl);
            
            try {
                await bot.telegram.setWebhook(webhookUrl);
                console.log(`‚úÖ Webhook set successfully`);
            } catch (error) {
                console.error('‚ùå Error setting webhook:', error);
            }
        } else {
            console.log('üîß Development mode - using polling');
            bot.launch();
        }
        
        console.log(`üéâ AnonTalk Bot v2.0.0 is ready!`);
        console.log(`üìã Features: 24 rooms, 9 categories, 3 languages, VIP system`);
        
        // Graceful shutdown
        process.once('SIGINT', () => {
            console.log('üõë Shutting down bot...');
            bot.stop('SIGINT');
        });
        
        process.once('SIGTERM', () => {
            console.log('üõë Shutting down bot...');
            bot.stop('SIGTERM');
        });
        
    } catch (error) {
        console.error('‚ùå Failed to initialize bot:', error);
        console.log('‚ö†Ô∏è Bot initialization failed, but server is still running for health checks');
    }
}

// Error handling for uncaught exceptions
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

module.exports = app;
